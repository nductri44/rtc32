[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\Espressif\frameworks\esp-idf-v5.0\work\rtc32\rtc32\build\bootloader\esp-idf\esptool_py && D:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe D:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/Espressif/frameworks/esp-idf-v5.0/work/rtc32/rtc32/build/bootloader/bootloader.bin"
Bootloader binary size 0x6710 bytes. 0x8f0 bytes (8%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/rtc32.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable rtc32.elf
[6/8] Generating binary image from built executable
esptool.py v4.4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/Espressif/frameworks/esp-idf-v5.0/work/rtc32/rtc32/build/rtc32.bin
[7/8] cmd.exe /C "cd /D D:\Espressif\frameworks\esp-idf-v5.0\work\rtc32\rtc32\build\esp-idf\esptool_py && D:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe D:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/Espressif/frameworks/esp-idf-v5.0/work/rtc32/rtc32/build/partition_table/partition-table.bin D:/Espressif/frameworks/esp-idf-v5.0/work/rtc32/rtc32/build/rtc32.bin"
rtc32.bin binary size 0x2ee40 bytes. Smallest app partition is 0x100000 bytes. 0xd11c0 bytes (82%) free.
[7/8] cmd.exe /C "cd /D D:\Espressif\frameworks\esp-idf-v5.0\components\esptool_py && D:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=D:/Espressif/frameworks/esp-idf-v5.0 -D SERIAL_TOOL=D:/Espressif/python_env/idf5.0_py3.8_env/Scripts/python.exe;;D:/Espressif/frameworks/esp-idf-v5.0/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=D:/Espressif/frameworks/esp-idf-v5.0/work/rtc32/rtc32/build -P D:/Espressif/frameworks/esp-idf-v5.0/components/esptool_py/run_serial_tool.cmake"
esptool esp32 -p COM3 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 rtc32.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.4
Serial port COM3
Connecting.......
Chip is ESP32-D0WD-V3 (revision v3.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 78:21:84:e4:9c:a0
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003efff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26384 bytes to 16420...
Writing at 0x00001000... (50 %)
Writing at 0x000076f3... (100 %)
Wrote 26384 bytes (16420 compressed) at 0x00001000 in 0.9 seconds (effective 241.9 kbit/s)...
Hash of data verified.
Compressed 192064 bytes to 102428...
Writing at 0x00010000... (14 %)
Writing at 0x0001bb6d... (28 %)
Writing at 0x00021452... (42 %)
Writing at 0x00026d5d... (57 %)
Writing at 0x0002f754... (71 %)
Writing at 0x000376b8... (85 %)
Writing at 0x0003d5a1... (100 %)
Wrote 192064 bytes (102428 compressed) at 0x00010000 in 3.0 seconds (effective 512.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 295.2 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
